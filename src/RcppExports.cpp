// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// TwoStatePhyloLikelihood
double TwoStatePhyloLikelihood(const arma::Mat<int>& treeEdges, const IntegerVector& tipStates, const arma::vec& branchLengths, const double& lambda_01, const double& lambda_10, const arma::vec& armaRootDist);
RcppExport SEXP _indorigin_TwoStatePhyloLikelihood(SEXP treeEdgesSEXP, SEXP tipStatesSEXP, SEXP branchLengthsSEXP, SEXP lambda_01SEXP, SEXP lambda_10SEXP, SEXP armaRootDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type treeEdges(treeEdgesSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type tipStates(tipStatesSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type branchLengths(branchLengthsSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda_10(lambda_10SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type armaRootDist(armaRootDistSEXP);
    rcpp_result_gen = Rcpp::wrap(TwoStatePhyloLikelihood(treeEdges, tipStates, branchLengths, lambda_01, lambda_10, armaRootDist));
    return rcpp_result_gen;
END_RCPP
}
// twoStateSufficientStatistics
NumericVector twoStateSufficientStatistics(arma::Mat<int>& treeEdges, IntegerVector& tipStates, NumericVector& branchLengths, double lambda_01, double lambda_10, NumericVector& rootDist);
RcppExport SEXP _indorigin_twoStateSufficientStatistics(SEXP treeEdgesSEXP, SEXP tipStatesSEXP, SEXP branchLengthsSEXP, SEXP lambda_01SEXP, SEXP lambda_10SEXP, SEXP rootDistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::Mat<int>& >::type treeEdges(treeEdgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type tipStates(tipStatesSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type branchLengths(branchLengthsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_10(lambda_10SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rootDist(rootDistSEXP);
    rcpp_result_gen = Rcpp::wrap(twoStateSufficientStatistics(treeEdges, tipStates, branchLengths, lambda_01, lambda_10, rootDist));
    return rcpp_result_gen;
END_RCPP
}
// twoStateCompleteDataLogPosterior
double twoStateCompleteDataLogPosterior(NumericVector suffStat, double lambda_01, double lambda_10, double prior_alpha_01, double prior_beta_01, double prior_alpha_10, double prior_beta_10);
RcppExport SEXP _indorigin_twoStateCompleteDataLogPosterior(SEXP suffStatSEXP, SEXP lambda_01SEXP, SEXP lambda_10SEXP, SEXP prior_alpha_01SEXP, SEXP prior_beta_01SEXP, SEXP prior_alpha_10SEXP, SEXP prior_beta_10SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type suffStat(suffStatSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_01(lambda_01SEXP);
    Rcpp::traits::input_parameter< double >::type lambda_10(lambda_10SEXP);
    Rcpp::traits::input_parameter< double >::type prior_alpha_01(prior_alpha_01SEXP);
    Rcpp::traits::input_parameter< double >::type prior_beta_01(prior_beta_01SEXP);
    Rcpp::traits::input_parameter< double >::type prior_alpha_10(prior_alpha_10SEXP);
    Rcpp::traits::input_parameter< double >::type prior_beta_10(prior_beta_10SEXP);
    rcpp_result_gen = Rcpp::wrap(twoStateCompleteDataLogPosterior(suffStat, lambda_01, lambda_10, prior_alpha_01, prior_beta_01, prior_alpha_10, prior_beta_10));
    return rcpp_result_gen;
END_RCPP
}
// twoStatePhyloGibbsSampler
NumericVector twoStatePhyloGibbsSampler(IntegerVector treeEdges, IntegerVector cubeDims, NumericMatrix branchLengths, NumericVector rootDist, IntegerMatrix tipStates, double initial_lambda_01, double initial_lambda_10, double prior_alpha_01, double prior_beta_01, double prior_alpha_10, double prior_beta_10, int mcmcSize, int mcmcBurnin, int mcmcSubsample);
RcppExport SEXP _indorigin_twoStatePhyloGibbsSampler(SEXP treeEdgesSEXP, SEXP cubeDimsSEXP, SEXP branchLengthsSEXP, SEXP rootDistSEXP, SEXP tipStatesSEXP, SEXP initial_lambda_01SEXP, SEXP initial_lambda_10SEXP, SEXP prior_alpha_01SEXP, SEXP prior_beta_01SEXP, SEXP prior_alpha_10SEXP, SEXP prior_beta_10SEXP, SEXP mcmcSizeSEXP, SEXP mcmcBurninSEXP, SEXP mcmcSubsampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type treeEdges(treeEdgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cubeDims(cubeDimsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type branchLengths(branchLengthsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rootDist(rootDistSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type tipStates(tipStatesSEXP);
    Rcpp::traits::input_parameter< double >::type initial_lambda_01(initial_lambda_01SEXP);
    Rcpp::traits::input_parameter< double >::type initial_lambda_10(initial_lambda_10SEXP);
    Rcpp::traits::input_parameter< double >::type prior_alpha_01(prior_alpha_01SEXP);
    Rcpp::traits::input_parameter< double >::type prior_beta_01(prior_beta_01SEXP);
    Rcpp::traits::input_parameter< double >::type prior_alpha_10(prior_alpha_10SEXP);
    Rcpp::traits::input_parameter< double >::type prior_beta_10(prior_beta_10SEXP);
    Rcpp::traits::input_parameter< int >::type mcmcSize(mcmcSizeSEXP);
    Rcpp::traits::input_parameter< int >::type mcmcBurnin(mcmcBurninSEXP);
    Rcpp::traits::input_parameter< int >::type mcmcSubsample(mcmcSubsampleSEXP);
    rcpp_result_gen = Rcpp::wrap(twoStatePhyloGibbsSampler(treeEdges, cubeDims, branchLengths, rootDist, tipStates, initial_lambda_01, initial_lambda_10, prior_alpha_01, prior_beta_01, prior_alpha_10, prior_beta_10, mcmcSize, mcmcBurnin, mcmcSubsample));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP pclt_test(SEXP, SEXP);
RcppExport SEXP treeConvolve(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_indorigin_TwoStatePhyloLikelihood", (DL_FUNC) &_indorigin_TwoStatePhyloLikelihood, 6},
    {"_indorigin_twoStateSufficientStatistics", (DL_FUNC) &_indorigin_twoStateSufficientStatistics, 6},
    {"_indorigin_twoStateCompleteDataLogPosterior", (DL_FUNC) &_indorigin_twoStateCompleteDataLogPosterior, 7},
    {"_indorigin_twoStatePhyloGibbsSampler", (DL_FUNC) &_indorigin_twoStatePhyloGibbsSampler, 14},
    {"pclt_test",                                   (DL_FUNC) &pclt_test,                                    2},
    {"treeConvolve",                                (DL_FUNC) &treeConvolve,                                 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_indorigin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
